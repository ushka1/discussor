/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/register": {
    /** Register a new user */
    post: {
      requestBody: {
        content: {
          "application/json": {
            username: string;
            email: string;
            password: string;
            repeatPassword: string;
          };
        };
      };
      responses: {
        /** @description New user registered successfully */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** @description Invalid request body */
        400: {
          content: never;
        };
        /** @description Email already in use */
        409: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/auth/login": {
    /** Login a user */
    post: {
      requestBody: {
        content: {
          "application/json": {
            email: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description User logged in successfully */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** @description Invalid email or password */
        401: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/discussions/{id}": {
    /** Get a discussion by id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description The discussion */
        200: {
          content: {
            "application/json": components["schemas"]["Discussion"];
          };
        };
        /** @description Invalid ID format */
        400: {
          content: never;
        };
        /** @description Discussion not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Delete a discussion by id */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Discussion deleted successfully */
        200: {
          content: never;
        };
        /** @description Invalid ID format */
        400: {
          content: never;
        };
        /** @description User is not the organizer */
        403: {
          content: never;
        };
        /** @description Discussion not found */
        404: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/discussions": {
    /** Get all discussions */
    get: {
      responses: {
        /** @description The list of discussions */
        200: {
          content: {
            "application/json": components["schemas"]["Discussion"][];
          };
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Create a new discussion */
    post: {
      requestBody: components["requestBodies"]["createDiscussion"];
      responses: {
        /** @description New discussion created successfully */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/discussions/{id}/conference-token": {
    /** Get a conference token for a discussion */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description The conference token */
        200: {
          content: {
            "application/json": string;
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/profile": {
    /** Get the user's profile */
    get: {
      responses: {
        /** @description User's profile */
        200: {
          content: {
            "application/json": components["schemas"]["Profile"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  "/": {
    /** Check if the server is up */
    get: {
      responses: {
        /** @description The server is up */
        200: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Discussion: {
      _id: string;
      organizer: {
        _id: string;
        username: string;
        email: string;
      };
      title: string;
      description?: string;
      tags?: string[];
      /** Format: date-time */
      startTime: string;
      durationInMinutes: number;
    };
    Profile: {
      username: string;
      email: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: {
    createDiscussion?: {
      content: {
        "application/json": {
          title: string;
          description?: string;
          tags?: string[];
          /** Format: date-time */
          startTime: string;
          durationInMinutes: number;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
